[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "main.lua"
pattern = '''not c.ending_shop and not c.reroll_shop and not c.selling_card and not c.selling_self and not c.buying_card and'''
position = "after"
payload = '''
not c.any_card_destroyed and not c.wheel_failed and not c.joker_added and
'''
match_indent = true
overwrite = false

# Update Booster Packs' descriptions when modded Vouchers are redeemed
#[[patches]]
#[patches.pattern]
#target = "functions/common_events.lua"
#pattern = '''if not full_UI_table.name then full_UI_table.name = localize{type = 'name', set = 'Other', key = name_override, nodes = full_UI_table.name} end'''
#position = "before"
#payload = '''
#if G.GAME.used_vouchers.v_3d_printer then
#    loc_vars[2] = loc_vars[2] + 1
#end
#if G.GAME.used_vouchers.v_militech_printer then
#    loc_vars[1] = loc_vars[1] + 1
#end
#'''
#match_indent = true
#overwrite = false

# Make Booster Packs have one more card
#[[patches]]
#[patches.pattern]
#target = "card.lua"
#pattern = '''local _size = self.ability.extra'''
#position = "after"
#payload = '''
#if G.GAME.used_vouchers.v_3d_printer then
#    _size = _size + 1
#end
#'''
#match_indent = true
#overwrite = false

# Make Booster Packs have one more choice
# Adjusting `G.GAME.pack_size` is necessary to make cards have enough spaces between them
#[[patches]]
#[patches.pattern]
#target = "card.lua"
#pattern = '''G.GAME.pack_choices = self.config.center.config.choose or 1'''
#position = "after"
#payload = '''
#if G.GAME.used_vouchers.v_3d_printer then
#    G.GAME.pack_size = G.GAME.pack_size + 1
#end
#if G.GAME.used_vouchers.v_militech_printer then
#    G.GAME.pack_choices = G.GAME.pack_choices + 1
#end

#for _, v in ipairs(G.jokers.cards) do
#    if v.ability.name == "Executive Card" and v.ability.executive_remaining == 0 then
#        G.GAME.pack_choices = G.GAME.pack_size
#        break
#    end
#end
#'''
#match_indent = true
#overwrite = false

# Inject description variables for modded Jokers
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''elseif self.ability.name == 'Perkeo' then loc_vars = {self.ability.extra}'''
position = "after"
payload = '''
elseif self.ability.name == "Egocentrism" then
    local count = 0

    if G.jokers and G.jokers.cards then
        for _, joker in ipairs(G.jokers.cards) do
            if joker.ability.set == "Joker" and joker.ability.name == "Egocentrism" then
                count = count + 1
            end
        end
    end

    loc_vars = {self.ability.extra, count * self.ability.extra}
elseif self.ability.name == "Eulogy Zero" then
    loc_vars = {''..(G.GAME and G.GAME.probabilities.normal or 1), self.ability.extra}
elseif self.ability.name == "Snake Eyes" then
    loc_vars = {self.ability.extra.mult_mod, self.ability.extra.mult}
elseif self.ability.name == "Bustling Fungus" then
    loc_vars = {self.ability.extra, self.ability.bungus_rounds}
elseif self.ability.name == "Lepton Daisy" then
    loc_vars = {self.ability.extra}
elseif self.ability.name == "Kjaro's Band" then
    loc_vars = {self.ability.extra.Xmult, self.ability.extra.required}

    if G.GAME and self.area and self.area == G.jokers then
        main_end = {
            {n=G.UIT.C, config={align = "bm", minh = 0.4}, nodes={
                {n=G.UIT.C, config={ref_table = self, align = "m", colour = self.ability.enabled and G.C.GREEN or G.C.RED, r = 0.05, padding = 0.06}, nodes={
                    {n=G.UIT.T, config={text = ' '..localize(self.ability.enabled and "k_active" or "ph_kjaro_disabled").." ",colour = G.C.UI.TEXT_LIGHT, scale = 0.32 * 0.9}},
                }}
            }}
        }
    end
elseif self.ability.name == "Happiest Mask" then
    loc_vars = {''..(G.GAME and G.GAME.probabilities.normal or 1), self.ability.extra}
elseif self.ability.name == "Encrusted Key" then
    loc_vars = {localize{type = "name_text", set = "Tag", key = "tag_coupon", nodes = {}}}
elseif self.ability.name == "Executive Card" then
    loc_vars = {self.ability.extra, localize{
        type = "variable",
        key = self.ability.executive_remaining == 0 and "loyalty_active" or "loyalty_inactive",
        vars = {self.ability.executive_remaining}
    }}
'''
match_indent = true
overwrite = false

# Inject description UI Box for modded Jokers
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif _c.name == 'Perkeo' then info_queue[#info_queue+1] = {key = 'e_negative_consumable', set = 'Edition', config = {extra = 1}}'''
position = "after"
payload = '''
elseif _c.name == "Bustling Fungus" then
    table.insert(info_queue, G.P_CENTERS.e_foil)
elseif _c.name == "Substandard Duplicator" then
    table.insert(info_queue, G.P_CENTERS.e_negative)
    table.insert(info_queue, {
        key = "temporary",
        set = "Other"
    })
elseif _c.name == "Encrusted Key" then
    table.insert(info_queue, {
        key = "tag_coupon",
        set = "Tag"
    })
'''
match_indent = true
overwrite = false

# Inject description variables for modded Vouchers
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif _c.name == "Clearance Sale" or _c.name == "Liquidation" then loc_vars = {_c.config.extra}'''
position = "after"
payload = '''
elseif _c.name == "3D Printer" or _c.name == "Mili-Tech Printer" then loc_vars = {_c.config.extra}
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.sticker then loc_vars = loc_vars or {}; loc_vars.sticker=self.sticker end'''
position = "after"
payload = '''
if self.ability.temporary then
    badges[#badges + 1] = "temporary"
end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if v == 'pinned_left' then info_queue[#info_queue+1] = {key = 'pinned_left', set = 'Other'} end'''
position = "after"
payload = '''
if v == "temporary" then
    info_queue[#info_queue + 1] = {
        key = "temporary",
        set = "Other"
    }
end
'''
match_indent = true
overwrite = false

# Implement modded Blinds
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''if self.debuff.value and self.debuff.value == card.base.value then'''
position = "before"
payload = '''
if self.name == "Glaucous Hammer" and card.ability.hammered then
    card:set_debuff(true)
    return
end
'''
match_indent = true
overwrite = false